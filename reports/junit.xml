<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="4" skipped="0" tests="4" time="1.089" timestamp="2024-03-27T15:14:52.221850" hostname="192.168.1.2"><testcase classname="tests.api.test_api.TestBatchPipeline" name="test_should_failed_unkown_column_1" time="0.009"><failure message="AssertionError: 200 != 400">self = &lt;tests.api.test_api.TestBatchPipeline testMethod=test_should_failed_unkown_column_1&gt;

    def test_should_failed_unkown_column_1(self):
        data = {"flights": [{"OPERA": "Aerolineas Argentinas", "TIPOVUELO": "N", "MES": 13}]}
        # when("xgboost.XGBClassifier").predict(ANY).thenReturn(np.array([0]))# change this line to the model of chosing
        response = self.client.post("/predict", json=data)
&gt;       self.assertEqual(response.status_code, 400)
E       AssertionError: 200 != 400

tests/api/test_api.py:24: AssertionError</failure></testcase><testcase classname="tests.api.test_api.TestBatchPipeline" name="test_should_failed_unkown_column_2" time="0.002"><failure message="AssertionError: 200 != 400">self = &lt;tests.api.test_api.TestBatchPipeline testMethod=test_should_failed_unkown_column_2&gt;

    def test_should_failed_unkown_column_2(self):
        data = {"flights": [{"OPERA": "Aerolineas Argentinas", "TIPOVUELO": "O", "MES": 13}]}
        # when("xgboost.XGBClassifier").predict(ANY).thenReturn(np.array([0]))# change this line to the model of chosing
        response = self.client.post("/predict", json=data)
&gt;       self.assertEqual(response.status_code, 400)
E       AssertionError: 200 != 400

tests/api/test_api.py:30: AssertionError</failure></testcase><testcase classname="tests.api.test_api.TestBatchPipeline" name="test_should_failed_unkown_column_3" time="0.002"><failure message="AssertionError: 200 != 400">self = &lt;tests.api.test_api.TestBatchPipeline testMethod=test_should_failed_unkown_column_3&gt;

    def test_should_failed_unkown_column_3(self):
        data = {"flights": [{"OPERA": "Argentinas", "TIPOVUELO": "O", "MES": 13}]}
        # when("xgboost.XGBClassifier").predict(ANY).thenReturn(np.array([0]))
        response = self.client.post("/predict", json=data)
&gt;       self.assertEqual(response.status_code, 400)
E       AssertionError: 200 != 400

tests/api/test_api.py:36: AssertionError</failure></testcase><testcase classname="tests.api.test_api.TestBatchPipeline" name="test_should_get_predict" time="0.002"><failure message="AssertionError: {} != {'predict': [0]}&#10;- {}&#10;+ {'predict': [0]}">self = &lt;tests.api.test_api.TestBatchPipeline testMethod=test_should_get_predict&gt;

    def test_should_get_predict(self):
        data = {"flights": [{"OPERA": "Aerolineas Argentinas", "TIPOVUELO": "N", "MES": 3}]}
        # when("xgboost.XGBClassifier").predict(ANY).thenReturn(np.array([0]))
        # change this line to the model of chosing
        response = self.client.post("/predict", json=data)
        self.assertEqual(response.status_code, 200)
&gt;       self.assertEqual(response.json(), {"predict": [0]})
E       AssertionError: {} != {'predict': [0]}
E       - {}
E       + {'predict': [0]}

tests/api/test_api.py:18: AssertionError</failure></testcase></testsuite></testsuites>